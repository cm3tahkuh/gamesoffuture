"use client";

import { useState } from "react";
import { motion, useInView } from "framer-motion";
import "./registration.scss";

const RegistrationForm = () => {
  const [players, setPlayers] = useState([]);
  const [newPlayer, setNewPlayer] = useState({ name: "", role: "" });
  const [error, setError] = useState("");
  const [formError, setFormError] = useState("");

  const [formData, setFormData] = useState({
    teamName: "",
    groupNumber: "",
    captainTelegram: "",
    selectedLocation: "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 113–∞",
    selectedSport: "–±–∞—Å–∫–µ—Ç–±–æ–ª",
  });

  const playerLimits = {
    –±–∞—Å–∫–µ—Ç–±–æ–ª: { –∫–∞–ø–∏—Ç–∞–Ω: 1, –∏–≥—Ä–æ–∫: 1, –∑–∞–ø–∞—Å–Ω–æ–π: 1 },
    —Ñ—É—Ç–±–æ–ª: { –∫–∞–ø–∏—Ç–∞–Ω: 1, –∏–≥—Ä–æ–∫: 4, –∑–∞–ø–∞—Å–Ω–æ–π: 1 },
    —Ö–æ–∫–∫–µ–π: { –∫–∞–ø–∏—Ç–∞–Ω: 1, –∏–≥—Ä–æ–∫: 5, –∑–∞–ø–∞—Å–Ω–æ–π: 1 },
  };

  const validatePlayer = () => {
    if (!newPlayer.name.trim()) {
      setError("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞.");
      return false;
    }

    const nameParts = newPlayer.name.trim().split(/\s+/);
    if (nameParts.length !== 3) {
      setError("–í–≤–µ–¥–∏—Ç–µ –§–ò–û: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ");
      return false;
    }

    const isValidName = nameParts.every((part) => /^[–ê-–Ø–Å][–∞-—è—ë]+$/.test(part));
    if (!isValidName) {
      setError(
        "–ö–∞–∂–¥–∞—è —á–∞—Å—Ç—å –§–ò–û –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞."
      );
      return false;
    }

    const limits = playerLimits[formData.selectedSport];
    const roleCount = players.reduce(
      (acc, player) => {
        acc[player.role || "–∏–≥—Ä–æ–∫"] += 1;
        return acc;
      },
      { –∫–∞–ø–∏—Ç–∞–Ω: 0, –∏–≥—Ä–æ–∫: 0, –∑–∞–ø–∞—Å–Ω–æ–π: 0 }
    );

    if (
      newPlayer.role === "–∫–∞–ø–∏—Ç–∞–Ω" &&
      roleCount["–∫–∞–ø–∏—Ç–∞–Ω"] >= limits["–∫–∞–ø–∏—Ç–∞–Ω"]
    ) {
      setError("–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞.");
      return false;
    }

    if (
      newPlayer.role === "–∑–∞–ø–∞—Å–Ω–æ–π" &&
      roleCount["–∑–∞–ø–∞—Å–Ω–æ–π"] >= limits["–∑–∞–ø–∞—Å–Ω–æ–π"]
    ) {
      setError("–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∞—Å–Ω–æ–≥–æ.");
      return false;
    }

    if (!newPlayer.role && roleCount["–∏–≥—Ä–æ–∫"] >= limits["–∏–≥—Ä–æ–∫"]) {
      setError(`–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ ${limits["–∏–≥—Ä–æ–∫"]} –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.`);
      return false;
    }

    if (
      players.length >=
      limits["–∫–∞–ø–∏—Ç–∞–Ω"] + limits["–∏–≥—Ä–æ–∫"] + limits["–∑–∞–ø–∞—Å–Ω–æ–π"]
    ) {
      setError(
        `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è ${formData.selectedSport} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ.`
      );
      return false;
    }

    setError("");
    return true;
  };

  const validateForm = () => {
    if (!formData.teamName.trim()) {
      setFormError("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.");
      return false;
    }
    if (!formData.groupNumber.trim()) {
      setFormError("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.");
      return false;
    }
    if (!formData.captainTelegram.trim()) {
      setFormError("–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã.");
      return false;
    }
    if (!/^@\S+$/.test(formData.captainTelegram)) {
      setFormError(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–ø–∏—Ç–∞–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '@' –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç."
      );
      return false;
    }

    const limits = playerLimits[formData.selectedSport];
    const roleCount = players.reduce(
      (acc, player) => {
        acc[player.role || "–∏–≥—Ä–æ–∫"] += 1;
        return acc;
      },
      { –∫–∞–ø–∏—Ç–∞–Ω: 0, –∏–≥—Ä–æ–∫: 0, –∑–∞–ø–∞—Å–Ω–æ–π: 0 }
    );
    if (roleCount["–∫–∞–ø–∏—Ç–∞–Ω"] < limits["–∫–∞–ø–∏—Ç–∞–Ω"]) {
      setFormError("–í –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∫–∞–ø–∏—Ç–∞–Ω.");
      return false;
    }
    if (roleCount["–∏–≥—Ä–æ–∫"] < limits["–∏–≥—Ä–æ–∫"]) {
      setFormError(`–í –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º ${limits["–∏–≥—Ä–æ–∫"]} –∏–≥—Ä–æ–∫–æ–≤.`);
      return false;
    }
    setFormError("");
    return true;
  };

  const addPlayer = () => {
    if (!validatePlayer()) return;
    setPlayers([...players, newPlayer]);
    setNewPlayer({ name: "", role: "" });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    try {
      const response = await fetch("/api/sendToTelegram", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ formData, players }),
      });

      if (response.ok) {
        alert("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
        setFormData({
          teamName: "",
          groupNumber: "",
          captainTelegram: "",
          selectedLocation: "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 113–∞",
          selectedSport: "–±–∞—Å–∫–µ—Ç–±–æ–ª",
        });
        setPlayers([]);
      } else {
        const error = await response.json();
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
      }
    } catch (error) {
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
      console.error(error);
    }
  };

  const removePlayer = (index) => {
    setPlayers(players.filter((_, i) => i !== index));
  };

  const handleRoleChange = (role) => {
    setNewPlayer((prev) => ({
      ...prev,
      role: prev.role === role ? "" : role,
    }));
  };

  const handleSportChange = (newSport) => {
    const limits = playerLimits[newSport];
    const roleCount = players.reduce(
      (acc, player) => {
        acc[player.role || "–∏–≥—Ä–æ–∫"] += 1;
        return acc;
      },
      { –∫–∞–ø–∏—Ç–∞–Ω: 0, –∏–≥—Ä–æ–∫: 0, –∑–∞–ø–∞—Å–Ω–æ–π: 0 }
    );

    if (
      roleCount["–∫–∞–ø–∏—Ç–∞–Ω"] > limits["–∫–∞–ø–∏—Ç–∞–Ω"] ||
      roleCount["–∏–≥—Ä–æ–∫"] > limits["–∏–≥—Ä–æ–∫"] ||
      roleCount["–∑–∞–ø–∞—Å–Ω–æ–π"] > limits["–∑–∞–ø–∞—Å–Ω–æ–π"]
    ) {
      alert(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞. –£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞."
      );
      return;
    }

    setFormData((prevFormData) => ({
      ...prevFormData,
      selectedSport: newSport,
    }));
  };

  return (
    <motion.div
      className="form-container"
      initial="hidden"
      animate="visible"
      variants={{
        hidden: { opacity: 0 },
        visible: {
          opacity: 1,
          transition: { staggerChildren: 0.3 },
        },
      }}
    >
      <div className="form-wrapper">
        <h2>–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê –¢–£–†–ù–ò–†</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞</label>
            <select
              className="form-sport"
              value={formData.selectedSport}
              onChange={(e) => handleSportChange(e.target.value)}
            >
              <option value="–±–∞—Å–∫–µ—Ç–±–æ–ª">–ë–∞—Å–∫–µ—Ç–±–æ–ª</option>
              <option value="—Ñ—É—Ç–±–æ–ª">–§—É—Ç–±–æ–ª</option>
              <option value="—Ö–æ–∫–∫–µ–π">–•–æ–∫–∫–µ–π</option>
            </select>
          </div>
          <div className="form-group">
            <label>–ê–¥—Ä–µ—Å</label>
            <select
              className="form-address"
              value={formData.selectedLocation}
              onChange={(e) =>
                setFormData({ ...formData, selectedLocation: e.target.value })
              }
            >
              <option value="–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 113–∞">
                –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 113–∞
              </option>
              <option value="–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 113–∞ –Æ–£–¢–£">
                –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 113–∞ –Æ–£–¢–£
              </option>
              <option value="–ö–æ–º–∞—Ä–æ–≤—Å–∫–æ–≥–æ 9–∞">–ö–æ–º–∞—Ä–æ–≤—Å–∫–æ–≥–æ 9–∞</option>
              <option value="–ö–æ–∂–∑–∞–≤–æ–¥—Å–∫–∞—è 1">–ö–æ–∂–∑–∞–≤–æ–¥—Å–∫–∞—è 1</option>
            </select>
          </div>
          <div className="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</label>
            <input
              type="text"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
              value={formData.teamName}
              onChange={(e) =>
                setFormData({ ...formData, teamName: e.target.value })
              }
            />
          </div>
          <div className="form-group">
            <label>–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</label>
            <input
              type="text"
              placeholder="–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã"
              value={formData.groupNumber}
              onChange={(e) =>
                setFormData({ ...formData, groupNumber: e.target.value })
              }
            />
          </div>
          <div className="form-group">
            <label>–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã</label>
            <input
              type="text"
              placeholder="@telegramname"
              value={formData.captainTelegram}
              onChange={(e) =>
                setFormData({ ...formData, captainTelegram: e.target.value })
              }
            />
          </div>
          <div className="player-list">
            {players.map((player, index) => (
              <div key={index} className="player-item">
                <span>{player.name}</span>
                <span>{player.role || "–∏–≥—Ä–æ–∫"}</span>
                <button type="button" onClick={() => removePlayer(index)}>
                  üóë
                </button>
              </div>
            ))}
          </div>
          <div className="add-player">
            <span>–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞:</span>
            <div className="add-player-form">
              <input
                type="text"
                placeholder="–§–ò–û"
                value={newPlayer.name}
                onChange={(e) =>
                  setNewPlayer({ ...newPlayer, name: e.target.value })
                }
              />
              <div className="role-selection">
                <label>
                  <input
                    type="checkbox"
                    checked={newPlayer.role === "–∫–∞–ø–∏—Ç–∞–Ω"}
                    onChange={() => handleRoleChange("–∫–∞–ø–∏—Ç–∞–Ω")}
                  />
                  –ö–∞–ø–∏—Ç–∞–Ω
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={newPlayer.role === "–∑–∞–ø–∞—Å–Ω–æ–π"}
                    onChange={() => handleRoleChange("–∑–∞–ø–∞—Å–Ω–æ–π")}
                  />
                  –ó–∞–ø–∞—Å–Ω–æ–π
                </label>
              </div>
              <button type="button" onClick={addPlayer}>
                +
              </button>
            </div>
          </div>
          {error && <p className="error-message">{error}</p>}
          {formError && <p className="form-error-message">{formError}</p>}
          <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
        </form>
      </div>
    </motion.div>
  );
};

export default RegistrationForm;
